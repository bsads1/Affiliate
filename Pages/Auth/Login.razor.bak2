@page "/login"
@layout WebLayout

@code {
    [Inject] public IConfiguration Configuration { get; set; } = default!;
    [Inject] public UsersService UsersService { get; set; } = default!;
    [Inject] public AuthService AuthService { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    [CascadingParameter] HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] public LoginForm Form { get; set; } = new();

    private string _loginFailedMessage = "";

    private async Task LoginUser()
    {
        var user = await UsersService.FindUserByCredsAsync(Form.Email, UsersService.GetSha256Hash(Form.Password));
        if (user == null)
        {
            _loginFailedMessage = "Login Failed: Your email or password was incorrect";
            return;
        }

        var cookieExpirationDays = Configuration.GetValue("Spark:Auth:CookieExpirationDays", 5);
        var cookieClaims = await AuthService.CreateCookieClaims(user);

        await HttpContext.SignInAsync(
            CookieAuthenticationDefaults.AuthenticationScheme,
            cookieClaims,
            new AuthenticationProperties
            {
                IsPersistent = Form.RememberMe,
                IssuedUtc = DateTimeOffset.UtcNow,
                ExpiresUtc = DateTimeOffset.UtcNow.AddDays(cookieExpirationDays)
            });

        NavigationManager.NavigateTo("dashboard");
    }

    public class LoginForm
    {
        public string Email { get; set; } = String.Empty;
        public string Password { get; set; } = String.Empty;
        public bool RememberMe { get; set; }
    }

    public class LoginFormValidator : AbstractValidator<LoginForm>
    {
        public LoginFormValidator()
        {
            RuleFor(p => p.Email)
                .EmailAddress().WithMessage("Please enter a valid email address");

            RuleFor(p => p.Password)
                .NotEmpty().WithMessage("Password is required");
        }
    }

}

<PageTitle>Login</PageTitle>

<div class="sm:py-12 px-4">
    <section class="w-full sm:max-w-md mx-auto py-20 flex flex-col justify-center items-center space-y-6">
        <h1 class="text-center text-3xl font-bold">
            Login to your account
        </h1>
        <EditForm Model="Form" OnValidSubmit="@LoginUser" FormName="LoginForm" method="post" Enhance
                  class="grid grid-cols-1 gap-y-6 p-6 mx-auto w-full max-w-md shadow-sm border rounded-md">
            <FluentValidationValidator/>
            @if (!String.IsNullOrEmpty(_loginFailedMessage))
            {
                <div class="mb-1 validation-message">
                    <span>@_loginFailedMessage</span>
                </div>
            }
            <div class="mb-6">
                <label class="mb-2 block font-display text-jacarta-700 dark:text-white">
                    <span>Email</span>
                    <InputText @bind-Value="Form.Email" type="email" autocomplete="email" class="w-full rounded-lg border-jacarta-100 py-3 hover:ring-2 hover:ring-accent/10 focus:ring-accent dark:border-jacarta-600 dark:bg-jacarta-700 dark:text-white dark:placeholder:text-jacarta-300"/>
                </label>
                <ValidationMessage For="() => Form.Email"/>
            </div>
            <div class="mb-6">
                <label class="mb-2 block font-display text-jacarta-700 dark:text-white">
                    <span>Password</span>
                    <InputText @bind-Value="Form.Password" type="password" class="w-full rounded-lg border-jacarta-100 py-3 hover:ring-2 hover:ring-accent/10 focus:ring-accent dark:border-jacarta-600 dark:bg-jacarta-700 dark:text-white dark:placeholder:text-jacarta-300"/>

                </label>
                <ValidationMessage For="() => Form.Password"/>
            </div>
            <div class="mb-6 flex items-center space-x-2">
                <label class="text-sm dark:text-jacarta-200">
                    <InputCheckbox @bind-Value="Form.RememberMe" class="h-5 w-5 self-start rounded border-jacarta-200 text-accent checked:bg-accent focus:ring-accent/20 focus:ring-offset-0 dark:border-jacarta-500 dark:bg-jacarta-600"/>
                    <span>Remember me</span>
                </label>
            </div>
            <div class="flex justify-between items-center">
                <a href="/register" class="link text-sm mr-2">Don't have an account? <u>Sign up</u></a>
                <button type="submit" class="rounded-full bg-accent py-3 px-8 text-center font-semibold text-white shadow-accent-volume transition-all hover:bg-accent-dark">
                    Login
                </button>
            </div>
        </EditForm>
    </section>
</div>