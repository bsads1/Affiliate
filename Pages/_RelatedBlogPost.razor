@using Microsoft.EntityFrameworkCore
@using Affiliate.Application.Enums
@inject DatabaseContext DbContext
@if (RelatedPosts is { Count: > 0 })
{
    <div class="grid grid-cols-1 gap-[1.875rem] sm:grid-cols-2">
        @foreach (var post in RelatedPosts)
        {
            <article>
                <div class="overflow-hidden rounded-2.5xl transition-shadow hover:shadow-lg">
                    <figure class="group overflow-hidden">
                        <a href="/post/@post.Slug">
                            <img src="@post.Image" onerror="this.onerror=null;this.src='/images/no-image.jpg';" alt="@post.Name" class="h-full w-full object-cover transition-transform duration-[1600ms] will-change-transform group-hover:scale-105">
                        </a>
                    </figure>

                    <div class="rounded-b-[1.25rem] border border-t-0 border-jacarta-100 bg-white p-[10%] dark:border-jacarta-600 dark:bg-jacarta-700">
                        <h2 class="mb-4 font-display text-xl text-jacarta-700 hover:text-accent dark:text-white dark:hover:text-accent">
                            <a href="/post/@post.Slug">@post.Name</a>
                        </h2>
                        <p class="mb-8 dark:text-jacarta-200">
                            @post.Description.Substring(0, 30)...
                        </p>
                        <div class="flex flex-wrap items-center space-x-2 text-sm text-jacarta-400">
                            <span>
                                <time datetime="@post.CreatedAt.ToString("yyyy-MM-dd")">@post.CreatedAt.ToString("MMM dd, yyyy")</time>
                            </span>
                        </div>
                    </div>
                </div>
            </article>
        }
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        RelatedPosts = await DbContext.PageItems
            .AsNoTracking()
            .Where(p => p.IsDelete == false && p.IsShow && p.Id != Id && p.Id < Id && p.Type == PageItemType.Blog.ToString())
            .OrderByDescending(p => p.CreatedAt)
            .Take(2)
            .Select(p => new PageItem
            {
                Id = p.Id,
                Name = p.Name,
                Slug = p.Slug,
                Image = p.Image,
                Description = p.Description,
                CreatedAt = p.CreatedAt,
                UpdatedAt = p.UpdatedAt
            })
            .ToListAsync();
    }

    public List<PageItem> RelatedPosts { get; set; } = [];

}