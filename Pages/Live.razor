@page "/live/{Slug}"
@using Microsoft.EntityFrameworkCore
@layout WebLayout
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>@PageTitle</PageTitle>

<section class="relative lg:pb-96">
    @if (!string.IsNullOrEmpty(Livestream.Image))
    {
        <div class="relative mb-5">
            <img src="@Livestream.Image" alt="@Livestream.Title" class="h-[18.75rem] object-cover w-full">
        </div>
    }
    <div class="container">
        <div class="mx-auto mb-16 max-w-lg">
            <h1 class="mb-4 font-display text-2xl text-jacarta-700 dark:text-white sm:text-5xl">
                @Livestream.Title
            </h1>
        </div>
        <div class="flex">
            <div class="flex-1">
                <article>
                    <div class="article-content">
                        @if (PageState.User.IsAuthenticated)
                        {
                            <div class="w-full my-2 flex gap-3 justify-between">
                                <button onclick="bet(1)" class="inline-block rounded-full bg-white border border-primary py-3 px-8 text-center font-semibold text-primary hover:bg-accent hover:text-white hover:border-transparent transition-all" type="button">Bet @Livestream.Player1Name</button>
                                <button onclick="bet(0)" class="inline-block rounded-full bg-white border border-primary py-3 px-8 text-center font-semibold text-primary hover:bg-accent hover:text-white hover:border-transparent transition-all" type="button">DRAW</button>
                                <button onclick="bet(2)" class="inline-block rounded-full bg-white border border-primary py-3 px-8 text-center font-semibold text-primary hover:bg-accent hover:text-white hover:border-transparent transition-all" type="button">Bet @Livestream.Player2Name</button>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Livestream.LivestreamInput))
                        {
                            <div class="w-full my-2">
                                @InputStream
                            </div>
                        }
                        @Content
                    </div>
                </article>
            </div>
            <aside class="basis-3/12 lg:pl-5">
                <form action="/search" class="relative mb-12 block">
                    <input type="search" class="w-full rounded-2xl border border-jacarta-100 py-[0.6875rem] px-4 pl-10 text-jacarta-700 placeholder-jacarta-500 focus:ring-accent dark:border-transparent dark:bg-white/[.15] dark:text-white dark:placeholder-white" placeholder="Search">
                    <button type="submit" class="absolute left-0 top-0 flex h-full w-12 items-center justify-center rounded-2xl">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" class="h-4 w-4 fill-jacarta-500 dark:fill-white">
                            <path fill="none" d="M0 0h24v24H0z"></path>
                            <path d="M18.031 16.617l4.283 4.282-1.415 1.415-4.282-4.283A8.96 8.96 0 0 1 11 20c-4.968 0-9-4.032-9-9s4.032-9 9-9 9 4.032 9 9a8.96 8.96 0 0 1-1.969 5.617zm-2.006-.742A6.977 6.977 0 0 0 18 11c0-3.868-3.133-7-7-7-3.868 0-7 3.132-7 7 0 3.867 3.132 7 7 7a6.977 6.977 0 0 0 4.875-1.975l.15-.15z"></path>
                        </svg>
                    </button>
                </form>
            </aside>
        </div>
    </div>
</section>
<script >
    function bet(i){
        const live = @Livestream.Id;
        const postData = { Live: live, Bet: i };
        fetch('/api/bet', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(postData)
        }).then(function (response) {
            return response.json();
        }).then(function (data) {
            console.log(data);
        })
    }
</script>
@code {
    [Parameter] public string? Slug { get; set; } = "";
    [CascadingParameter] public PageState PageState { get; set; } = default!;
    private string? PageTitle { get; set; }
    private MarkupString Content { get; set; }
    private MarkupString InputStream { get; set; }
    private Livestream Livestream { get; set; } = new();

    private bool IsLive(Livestream livestream)
    {
        return livestream.StartTime < DateTime.Now && livestream.CloseTime > DateTime.Now;
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Slug)) NavigationManager.NavigateTo("/");
        var livestream = await DbContext.Livestreams
            .AsNoTracking()
            .FirstOrDefaultAsync(p => p.Slug.ToLower() == Slug.ToLower() && p.IsDelete == false);
        if (livestream == null) NavigationManager.NavigateTo("/");
        Livestream = livestream;
        PageTitle = livestream?.Title ?? "";
        Content = new MarkupString(livestream?.Content ?? "");
        InputStream = new MarkupString(livestream?.LivestreamInput ?? "");
    }

}