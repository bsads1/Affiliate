@page "/admin/seo/update"
@using Affiliate.Application.Dtos
@using Mapster
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject DatabaseContext DatabaseContext

@code {
    [CascadingParameter] public HttpContext HttpContext { get; set; } = default!;
    private string PageTitle { get; set; }

    private List<ToolbarItem> ToolbarItems { get; set; } = [];
    private PageSeoPostFormDto? Form { get; set; } = default!;
    private List<string> _robots = [];

    protected override async Task OnInitializedAsync()
    {
        var urlFromHeader = HttpContext.Request.Headers["Referer"].ToString();
        var uri = new Uri(urlFromHeader);
        var pathAfterDomain = uri.AbsolutePath;
        
        var id = HttpContext.Request.Query["id"];
        var pageType = HttpContext.Request.Query["pageType"].ToString();
        var pageId = HttpContext.Request.Query["pageId"].ToString();
        if (string.IsNullOrEmpty(id) || string.IsNullOrEmpty(pageType) || string.IsNullOrEmpty(pageId))
        {
            NavigationManager.NavigateTo(urlFromHeader, true);
        }

        ToolbarItems =
        [
            new ToolbarItem { Href = urlFromHeader, Text = "Back to previous", ClassList = "btn btn-neutral text-base-100" }
        ];

        PageTitle = "Update SEO Page";

        var form = (await DatabaseContext.PageSeos
                .FirstOrDefaultAsync(x => x.PageRoute == pathAfterDomain && x.PageType == pageType && x.PageId == pageId))?
            .Adapt<PageSeoPostFormDto>() ?? new PageSeoPostFormDto();
        if (form.Id > 0)
        {
            Form = form;
            _robots = !string.IsNullOrEmpty(Form.Robots)
                ? Form.Robots
                    .Split(",")
                    .ToList()
                : [];
        }
        else
        {
            Form = new PageSeoPostFormDto
            {
                PageRoute = urlFromHeader,
                Canonical = urlFromHeader,
                PageId = pageId,
                PageType = pageType
            };
        }
    }

}

<PageTitle>Update @Form?.PageRoute</PageTitle>
<Toolbar PageTitle="@PageTitle" ToolbarItems="@ToolbarItems"></Toolbar>

<style>
    .select2-results{
        background: #fff;
    }
</style>
@if (Form != null)
{
    <div class="card card-compact w-100 bg-base-100 shadow-xl">
        <div class="card-body">
            <div id="alert"></div>
            <form id="PageForm" data-enhance name="PageForm" enctype="multipart/form-data">
                <input type="hidden" value="@Form.Id" id="Id" name="Id"/>
                <input type="hidden" value="@Form.PageId" id="PageId" name="PageId"/>
                <input type="hidden" value="@Form.PageRoute" id="PageRoute" name="PageRoute"/>
                <input type="hidden" value="@Form.PageType" id="PageType" name="PageType"/>
                <div class="space-y-4">
                    <div class="grid grid-cols-3 gap-4">
                        <div class="col-span-1 space-y-2">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Title</label>
                                <input name="PageRoute" value="@Form.PageRoute" readonly class="input input-bordered w-full"/>
                            </div>
                            <div>
                                <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
                                <input id="title" name="Title" value="@Form.Title" placeholder="Title" class="input input-bordered w-full"/>
                            </div>
                            <div>
                                <label for="canonical" class="block text-sm font-medium text-gray-700">Slug</label>
                                <input id="canonical" name="Canonical" value="@Form.Canonical" placeholder="Canonical" class="input input-bordered w-full"/>
                            </div>
                            <div>
                                <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                                <textarea id="description" name="Description" class="input input-bordered w-full h-32">@Form.Description</textarea>
                            </div>
                            <div>
                                <label for="keywords" class="block text-sm font-medium text-gray-700">Keywords</label>
                                <input id="keywords" name="Keywords" value="@Form.Keywords" placeholder="Keywords" class="input input-bordered w-full"/>
                            </div>
                            <div>
                                <label for="robots" class="block text-sm font-medium text-gray-700">Robots</label>
                                <select id="robots" name="Robots" class="input input-bordered w-full" multiple="multiple">
                                    <option value="">None</option>
                                    <option value="all">All (Default - Index and Follow)</option>
                                    <option value="noindex">NoIndex (Do not index this page)</option>
                                    <option value="nofollow">NoFollow (Do not follow links on this page)</option>
                                    <option value="none">None (Equivalent to NoIndex, NoFollow)</option>
                                    <option value="noarchive">NoArchive (Do not show a cached link in search results)</option>
                                    <option value="nosnippet">NoSnippet (Do not show a snippet or cache this page)</option>
                                    <option value="notranslate">NoTranslate (Do not offer translation of this page in search results)</option>
                                    <option value="noimageindex">NoImageIndex (Do not index images on this page)</option>
                                </select>
                            </div>
                            <div>
                                <label for="file" class="block text-sm font-medium text-gray-700">Thumbnail</label>
                                <div>
                                    <div class="w-full">
                                        <input type="file" accept="image/*" id="file" name="File" class="file-input file-input-bordered file-input-primary w-full"/>
                                    </div>
                                    <div class="w-full">
                                        @if (!string.IsNullOrEmpty(Form?.Image))
                                        {
                                            <img src="@Form.Image" class="w-fit" alt=""/>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="text-end">
                        <button class="btn btn-neutral" type="button" onclick="submitForm()">
                            @if (Form?.Id > 0)
                            {
                                <text>Update</text>
                            }
                            else
                            {
                                <text>Create</text>
                            }
                        </button>
                    </div>
                </div>
                <AntiforgeryToken/>
            </form>
        </div>
    </div>
    <input type="hidden" value="@(JsonSerializer.Serialize(_robots))" id="robot_value"/>
}
<SectionContent SectionName="section-bottom">
    <link href="js/select2/select2.min.css" rel="stylesheet"/>
    <script src="js/jquery-3.7.1.min.js"></script>
    <script src="js/select2/select2.min.js"></script>
    <script >
    async function submitForm(){
        const form = document.getElementById('PageForm');
        const formData = new FormData(form);
        formData.set('Robots', $('#robots').val().join(','));

        try {
            globalCommons.ShowLoading(document.querySelector('#PageForm'));
            const response = await fetch('/api/seo', {
                method: 'POST',
                body: formData
            });
            const data = await response.json().then(data => data);
            if (data.ok) {
                globalCommons.CreateAlert('Form submitted successfully', 'success',document.querySelector('#alert'));
                setTimeout(() => {
                window.location.reload();
                }, 1500);
            } else {
                globalCommons.CreateAlert('Form submitted failed with error ' + data.messages, 'error',document.querySelector('#alert'));
                globalCommons.HideLoading(document.querySelector('#PageForm'));
            }
        } catch (error) {
            console.error('An error occurred during form submission:', error);
            globalCommons.HideLoading(document.querySelector('#PageForm'));
        }
    }
    document.addEventListener('DOMContentLoaded', function() {
        $('#robots').select2({
            selectionCssClass: 'input input-bordered w-full h-fit',
            dropdownCssClass: 'input input-bordered w-full',
            allowClear: true,
            multiple: true,
            tags:false
        }).val(JSON.parse($('#robot_value').val())).trigger('change');
    })
</script>
</SectionContent>