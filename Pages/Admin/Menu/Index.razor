@page "/admin/menu"
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@attribute [Authorize(Policy = CustomPolicies.MasterAdminAccess)]
@inject DatabaseContext DbContext
<PageTitle>Menu manager</PageTitle>
<Toolbar PageTitle="@PageTitle" ToolbarItems="[]"></Toolbar>
<div class="grid grid-cols-2 gap-4">
    <div class="col-span-1">
        <ul id="tree"></ul>
    </div>
    <div class="col-span-1">
        <div id="form_menu">
            <input type="hidden" name="id">
            <div class="py-2">
                <label>Title:</label>
                <input type="text" name="title" class="input input-bordered w-full"/>
            </div>
            <div class="py-2">
                <label>Links:</label>
                <input type="text" name="link" class="input input-bordered w-full"/>
            </div>
            <div class="py-2 flex gap-2">
                <button id="btnUpdate" class="btn btn-primary text-base-100" type="button">Create</button>
                <button id="btnCancel" class="btn btn-secondary text-base-100 hidden" type="button">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {

    private string PageTitle { get; set; }
    private List<MenuItem> _items = [];

    protected override async Task OnInitializedAsync()
    {
        PageTitle = "Menu manager";
        _items = await DbContext.MenuItems.AsNoTracking()
            .OrderBy(p => p.Id)
            .ToListAsync();
    }

}

<SectionContent SectionName="section-bottom">
    <link href="/css/jquery-ui.css" rel="stylesheet" type="text/css"/>
    <link href="/js/treesortable/css/treeSortable.css" rel="stylesheet"/>
    <script src="/js/jquery-3.7.1.min.js" ></script> 
    <script src="/js/jquery-ui.js"></script>
    <script src="/js/treesortable/js/treeSortable.js"></script>
    <script > 
        const sortable = new TreeSortable({
        	treeSelector: '#tree'
        });
        
        function resetForm() {
            document.querySelector('#form_menu input[name="id"]').value = 0;
            document.querySelector('#form_menu input[name="title"]').value = '';
            document.querySelector('#form_menu input[name="link"]').value = '';
            document.querySelector('#btnUpdate').innerHTML = 'Create';
            document.querySelector('#btnCancel').classList.add('hidden');
        }
        
        function reloadTree(){
            fetch('/api/menu').then(response => response.json())
                .then(data => {
                    const $content = data.map(sortable.createBranch);
                    $('#tree').html($content);
                    sortable.run(); 
                });
        }
        
        reloadTree();
        
        const delay = () => {
            return new Promise(resolve => {
                setTimeout(() => {
                    resolve();
                }, 1000);
            });
        };
    
        sortable.onSortCompleted(async (event, ui) => {
            await delay();
            const item = sortable.getData($(ui.item));
            
            const formData = new FormData();
            formData.append('Id', item.id);
            formData.append('ParentId', item.parent);
            formData.append('Level', item.level);
            
            const options = {
                method: 'PUT',
                body: formData
            };
            
            fetch('/api/menu/update-position', options)
            .then(response => response.json())
            .then(data => {
                if (data.ok) {
                    globalCommons.CreateToast('Updated menu successfully', 'success');
                } else {
                    globalCommons.CreateToast('Failed to update menu', 'error');
                }})
        });
        
        sortable.addListener('click', '.edit-branch', function (event, instance) {
            event.preventDefault();
            const data = instance.editBranch($(event.target));
            document.querySelector('#form_menu input[name="id"]').value = data.id;
            document.querySelector('#form_menu input[name="title"]').value = data.title;
            document.querySelector('#form_menu input[name="link"]').value = data.link;
            document.querySelector('#btnUpdate').innerHTML = 'Update';
            document.querySelector('#btnCancel').classList.remove('hidden');
        });
    
        sortable.addListener('click', '.add-child', function (event, instance) {
            event.preventDefault();
            instance.addChildBranch($(event.target));
        });
    
        sortable.addListener('click', '.add-sibling', function (event, instance) {
            event.preventDefault();
            instance.addSiblingBranch($(event.target));
        });
    
        sortable.addListener('click', '.remove-branch', function (event, instance) {
            event.preventDefault();
    
            const confirm = window.confirm('Are you sure you want to delete this branch?');
            if (!confirm) {
                return;
            }
            instance.removeBranch($(event.target));
        });
        
        document.querySelector('#btnCancel').addEventListener('click', function () {
            resetForm();
        });
        
        document.querySelector('#btnUpdate').addEventListener('click', function () {
            const id = $('input[name="id"]').val();
            const title = $('input[name="title"]').val();
            const link = $('input[name="link"]').val();
            
            const formData = new FormData();
            formData.append('Id', id);
            formData.append('Title', title);
            formData.append('Link', link);
            const target = document.querySelector('#form_menu');
            if (id >0) {
                 const options = {
                    method: 'PUT',
                    body: formData
                };
                 globalCommons.ShowLoading(target);
                         
                 fetch('/api/menu', options)
                 .then(response => response.json())
                 .then(data => {
                     globalCommons.HideLoading(target);
                     if (data.ok) {
                         globalCommons.CreateToast('Updated menu successfully', 'success');
                         reloadTree();
                         resetForm();
                     } else {
                         globalCommons.CreateToast('Failed to update menu', 'error');
                     }
                 })
                 .catch(error => {
                     globalCommons.HideLoading(target);
                     globalCommons.CreateToast('An error occurred during the delete request: '+ error, 'error');
                 });
            } else{
                formData.append('Level', 1);
                
                const options = {
                    method: 'POST',
                    body: formData
                };
                globalCommons.ShowLoading(target);
        
                fetch('/api/menu', options)
                    .then(response => response.json())
                    .then(data => {
                        globalCommons.HideLoading(target);
                        if (data.ok) {
                            globalCommons.CreateToast('Create menu successfully', 'success');
                            reloadTree();
                            resetForm();
                        } else {
                            globalCommons.CreateToast('Failed to create menu', 'error');
                        }
                    })
                    .catch(error => {
                        globalCommons.HideLoading(target);
                        globalCommons.CreateToast('An error occurred during the delete request: '+ error, 'error');
                    });
            }
        })
        
    </script>
</SectionContent>