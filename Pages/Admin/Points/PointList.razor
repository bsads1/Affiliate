@page "/api/point-list/{UserId:int}"
@using Microsoft.EntityFrameworkCore
@using Affiliate.Application.Extensions
@inject DatabaseContext DbContext
@layout EmptyLayout
<table class="w-full bg-white shadow-md rounded my-6">
    <thead>
    <tr>
        <th class="py-2 px-4 bg-gray-200 font-bold uppercase text-sm text-gray-700 text-left">#</th>
        <th class="py-2 px-4 bg-gray-200 font-bold uppercase text-sm text-gray-700 text-left">Time</th>
        <th class="py-2 px-4 bg-gray-200 font-bold uppercase text-sm text-gray-700 text-right">Points</th>
        <th class="py-2 px-4 bg-gray-200 font-bold uppercase text-sm text-gray-700 text-right">Money</th>
        <th class="py-2 px-4 bg-gray-200 font-bold uppercase text-sm text-gray-700 text-left">Type</th>
        <th class="py-2 px-4 bg-gray-200 font-bold uppercase text-sm text-gray-700 text-right">Points Balance</th>
        <th class="py-2 px-4 bg-gray-200 font-bold uppercase text-sm text-gray-700 text-left">Note</th>
    </tr>
    </thead>
    <tbody>
    @if (list.Any())
    {
        var stt = list.Count;
        foreach (var item in list)
        {
            <tr>
                <td class="py-2 px-4 border-b border-gray-200">@stt</td>
                <td class="py-2 px-4 border-b border-gray-200">@item.TransactionTimestamp.ToString("dd/MM/yyyy HH:mm")</td>
                <td class="py-2 px-4 border-b border-gray-200 text-right">
                    @if (item.PointsChanged > 0)
                    {
                        <div class="badge badge-primary text-base-100">@item.PointsChanged.AddDecimalSeparator()</div>
                    }
                    else
                    {
                        <div class="badge badge-error text-base-100">@((item.PointsChanged*-1).AddDecimalSeparator())</div>
                    }
                </td>
                <td class="py-2 px-4 border-b border-gray-200 text-right">
                    <div class="flex w-full justify-end gap-2">
                    @item.AmountChanged.AddDecimalSeparator()
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
                    </svg>
                    </div>
                </td>
                <td class="py-2 px-4 border-b border-gray-200"><div class="badge badge-accent">@item.TransactionType</div></td>
                <td class="py-2 px-4 border-b border-gray-200 text-right">
                    <strong>@item.AccountBalance.AddDecimalSeparator()</strong>
                </td>
                <td class="py-2 px-4 border-b border-gray-200">@item.TransactionDescription</td>
            </tr>
            stt--;
        }
    }
    </tbody>
</table>


@code {
    [Parameter]
    public int UserId { get; set; }
    
    private List<TransactionPoint> list = [];

    protected override async Task OnInitializedAsync()
    {
        var userGuid = await DbContext.Users
            .AsNoTracking().Where(p => p.Id == UserId)
            .Select(p => p.Guid).FirstOrDefaultAsync();
        list = await DbContext.TransactionPoints
            .AsNoTracking()
            .Where(p => p.UserId == userGuid)
            .OrderByDescending(p => p.TransactionTimestamp)
            .ToListAsync();
    }
}