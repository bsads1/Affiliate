@page "/admin/account/edit/{Id:int}"
@using Affiliate.Application.Dtos
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = CustomPolicies.MasterAdminAccess)]

<PageTitle>@PageTitle</PageTitle>

<style>
    .select2-results{
        background: #fff;
    }
</style>

<Toolbar PageTitle="@PageTitle" ToolbarItems="@ToolbarItems"></Toolbar>

<div class="card card-compact w-100 bg-base-100 shadow-xl">
    <div class="card-body">
        <div id="alert"></div>
        <form id="UserForm" data-enhance name="UserForm" enctype="multipart/form-data">
            <input type="hidden" name="Id" value="@Form.Id"/>
            <div class="space-y-4">
                <div>
                    <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                    <InputText id="email" name="Email" @bind-Value="Form.Email" placeholder="Email" class="input input-bordered w-full max-w-xs"></InputText>
                </div>
                <div>
                    <label for="roleSelect" class="block text-sm font-medium text-gray-700">Roles</label>
                    <select id="roleSelect" name="Roles" class="select select-bordered">
                        @if (Roles.Any())
                        {
                            foreach (var role in Roles)
                            {
                                <option value="@role.Guid">@role.Name</option>
                            }
                        }
                    </select>
                    <input type="hidden" id="RolesString" value="@string.Join(",", Form.Roles)">
                </div>
                <div>
                    <button class="btn btn-neutral" type="button" onclick="submitForm()">Update</button>
                </div>
            </div>
            <AntiforgeryToken/>
        </form>
    </div>
</div>

<SectionContent SectionName="section-bottom">
    <link href="/js/select2/select2.min.css" rel="stylesheet"/>
    <script src="/js/jquery-3.7.1.min.js"></script> 
    <script src="/js/select2/select2.min.js"></script>
    
    <script > 
        async function submitForm() {
            const form = document.getElementById('UserForm');
            const formData = new FormData(form);
            
            try {
                const response = await fetch('/api/account/edit', {
                    method: 'POST',
                    body: formData
                });
                const data = await response.json().then(data => data);
                if (data.ok) {
                    globalCommons.CreateAlert('Form submitted successfully', 'success',document.querySelector('#alert'));
                } else {
                    globalCommons.CreateAlert('Form submitted failed', 'error',document.querySelector('#alert'));
                }
            } catch (error) {
                console.error('An error occurred during form submission:', error);
            }
        }
        
        function getRoles(){
            const roles = $('#RolesString').val();
            return roles.split(',');
        }
        
        document.addEventListener("DOMContentLoaded", function() {
            $('#roleSelect').select2({
                selectionCssClass: 'input input-bordered w-full max-w-xs h-fit',
                dropdownCssClass: 'input input-bordered w-full max-w-xs',
                multiple: true,
                placeholder: 'Select roles',
                allowClear: true,
                width: '100%',
            }).val(getRoles()).trigger('change');
           
            $('#UserForm').on('submit', async function (e) {
                //await submitForm();
            })
        })
    </script>
</SectionContent>

@code {
    [Parameter] public int Id { get; set; } = 1;
    [SupplyParameterFromForm] public UserPostFormDto? Form { get; set; }
    private IEnumerable<Role> Roles { get; set; }
    private string PageTitle { get; set; }

    private List<ToolbarItem> ToolbarItems { get; set; } =
    [
        new ToolbarItem { Href = "/admin/account/create", Text = "Add Account", ClassList = "btn btn-primary text-base-100" },
        new ToolbarItem { Href = "/admin/account", Text = "Back to Accounts List", ClassList = "btn btn-neutral text-base-100" }
    ];

    protected override void OnInitialized()
    {
        Form ??= new();
        var user = DbContext.Users.Find(Id);
        if (user == null || user.IsDelete)
        {
            NavigationManager.NavigateTo("/admin/account");
        }
        else
        {
            var userRoles = (from ur in DbContext.UserRoles
                where ur.UserId == user.Guid
                select ur.RoleId).OrderBy(p => p).ToList();
            Form.Id ??= user.Id;
            Form.Name ??= user.Name;
            Form.Email ??= user.Email;
            Form.Points ??= user.Points;
            Form.Roles ??= userRoles;
        }

        PageTitle = $"Edit Account {Form.Name}";

        Roles = DbContext.Roles.OrderBy(p => p.Id).ToList();
    }

    private async Task Submit()
    {
        var name = Form?.Name;
        var email = Form?.Email;
        var id = Form?.Id;
        var points = Form?.Points;
        var roles = Form?.Roles;
        var rolesString = Form?.RolesString;
        //get value of #RolesString use Jsruntime
        if (Form?.File != null)
        {
            var file = Form.File;
            //var path = Path.Combine("wwwroot", "images", file.FileName);
            //using var stream = new FileStream(path, FileMode.Create);
            //file.CopyTo(stream);
        }
    }

}